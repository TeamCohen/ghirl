package ghirl.graph;

import java.util.*;
import ghirl.util.*;

/** Machinery for computing a new edge type in a graph. 
 *
 * A GraphAnnotator is added to an AnnotatableGraph.  The semantics
 * are that after adding the GraphAnnotator, the AnnotatableGraph will
 * conceptually have additional edges labeled 'linkLabel' from all
 * nodes that match the precondition.  The edges will be generated by
 * running the GraphSearcher given as the edgeDefinition.
 */

public class GraphAnnotator
{
    private NodeFilter precondition;
    private GraphSearcher edgeDefinition;
    private String linkLabel;

    public GraphAnnotator(String linkLabel,String precondition,GraphSearcher edgeDefinition)
    {
	this(linkLabel,new NodeFilter(precondition),edgeDefinition);
    }

    public GraphAnnotator(String linkLabel,NodeFilter precondition,GraphSearcher edgeDefinition)
    {
	this.linkLabel=linkLabel;
	this.precondition=precondition;
	this.edgeDefinition=edgeDefinition;
    }
    public String getLinkLabel() { return linkLabel; }
    public NodeFilter getPrecondition() { return precondition; }
    public GraphSearcher getEdgeDefinition() { return edgeDefinition; }

    /** Return all nodes reachable by following this edge from id
     *  using this annotation rule.
     */
    public Distribution walk1(Graph graph,GraphId id)
    {
	//System.out.println("testing precondition on "+id);
	if (precondition.accept(graph,id)) {
	    //System.out.println("precondition ok for "+id);
	    edgeDefinition.setGraph(graph);
	    return edgeDefinition.search(id);
	} else {
	    return TreeDistribution.EMPTY_DISTRIBUTION;
	}
    }
}
