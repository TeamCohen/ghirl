<?xml version="1.0" encoding="iso-8859-1"?>
<project name="GHIRL2" default="all" basedir=".">

	<property file="build.properties"/>
	
	<description>
			GHIRL: Graph Hierarchy Information Retrieval Language?
	</description>

	<target name="init" depends="" description="Initialize environment">
		<tstamp>
			<format property="jartime" pattern="MMM-dd-yyyy-HH:mm"/>
		</tstamp>
		
		<!-- Grab "for" task from ant-contrib -->
		<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
		
		<!-- Configure paths -->
		<property name="path.src"    value="src"/>
		<property name="path.lib"    value="lib"/>
		<property name="path.devlib" value="dev-lib"/>
		<property name="path.build"  value="build"/>
		<property name="path.dist"   value="dist"/>
		<property name="path.tmp"    value="tmp"/>
		<property name="path.test"   value="test"/>
		<property name="path.javadoc" value="doc"/>
		
		<!-- Configure compilation parameters -->
		<property name="compile.debug"              value="true"/>
		<property name="compile.deprecation"        value="true"/>
		<property name="compile.jdk-version.source" value="1.6"/>
		<property name="compile.jdk-version.target" value="1.6"/>
		<property name="compile.optimize"           value="true"/>
		<property name="compile.compiler"           value="javac1.6"/>
		
		<path id="compile.classpath">
			<fileset dir="${path.lib}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${path.devlib}">
				<include name="*.jar"/>
			</fileset>
			<pathelement path="${path.src}"/>
			<pathelement path="${path.build}"/>
		</path>
		
		<patternset id="no-tests">
			<exclude name="**/test/*.*"/> <!-- leave test cases behind -->
			<exclude name="**/test"/>
		</patternset>
	</target>

	<target name="make_directories" description="Creates all project directories" depends="init">
		<mkdir dir="${path.dist}"/>
		<mkdir dir="${path.tmp}"/>
		<mkdir dir="${path.build}"/>
		<mkdir dir="${path.lib}"/>
		<mkdir dir="${path.devlib}"/>
		<mkdir dir="${path.src}"/>
	</target>

	<target name="prepare" depends="init, make_directories" description="Prepare build directory"/>

	<target name="compile" depends="prepare" description="Compile Java sources">
		<javac  debug="${compile.debug}"
				deprecation="${compile.deprecation}"
				destdir="${path.build}"
				optimize="${compile.optimize}"
				srcdir="${path.src}">
			<classpath refid="compile.classpath"/>
		</javac>
		<copy todir="${path.build}">
			<fileset dir="${path.src}">
				<exclude name="**/*.java"/>
				<exclude name="**/*.cpp"/>
				<exclude name="**/*.h"/>
				<exclude name="**/*.c"/>
				<exclude name="**/*.cc"/>
			</fileset>
		</copy>
	</target>

	<target name="clean" depends="init" description="Wipe out all generated files">
	    <delete>
	    	<fileset dir="${path.build}/">
	    		<include name="*/"/>
	    	</fileset>
	    	<fileset dir="${path.tmp}/">
	    		<include name="*/"/>
	    	</fileset>
	    </delete>
	</target>

	<target name="all" depends="clean, compile" description="Clean and compile all components"/>
	
	<target name="dist-lib-solo" depends="compile" description="Jar up GHIRL for distribution (NO dependencies, just GHIRL; does not include tests)">
		<jar destfile="${path.dist}/ghirl2-${DSTAMP}.jar">
			<fileset dir="${path.build}">
				<patternset refid="no-tests"/>
			</fileset>
		  </jar>
	</target>

	<target name="pack-lib">
		<echo>Packing ${jarfile}...</echo>
		<zip destfile="${path.tmp}/${lib.zip}" update="true">
			<zipfileset src="${jarfile}"/>
		</zip>
	</target>
	<target name="pack-all-libs">
		<property name="lib.zip" value="lib.zip"/>
		<foreach target="pack-lib" param="jarfile" inheritall="true">
			<path>
				<fileset dir="${path.lib}" includes="*.jar"/>
			</path>
		</foreach>
		<echo>Lib packing complete.</echo>
	</target>
	<target name="pack-tomcat-libs">
		<property name="lib.zip" value="tomcat-libs.zip"/>
		<foreach target="pack-lib" param="jarfile" inheritall="true">
			<path>
				<fileset dir="${path.lib}" includes="*.jar">
					<exclude name="tokyocabinet.jar"/>
				</fileset>
			</path>
		</foreach>
		<echo>Lib packing complete.</echo>
	</target>
			
	<target name="dist-lib-full" depends="compile,pack-all-libs" description="Jar up GHIRL for distribution (includes all dependencies; does not include tests)">
		<jar destfile="${path.dist}/ghirl2-full-${DSTAMP}.jar">
			<fileset dir="${path.build}"><patternset refid="no-tests"/></fileset>
			<zipfileset src="${path.tmp}/${lib.zip}"/>
		</jar>
	</target>
	<target name="copy-sharedlibs">
		<copy todir="${path.dist}">
			<fileset dir="${path.lib}" includes="tokyocabinet.jar"/>
		</copy>
	</target>
	<target name="dist-lib-tomcat" depends="compile,pack-tomcat-libs,copy-sharedlibs" description="Jar up GHIRL for distribution to a tomcat container (includes all dependencies EXCEPT tokyocabinet.jar, which must be transferred to $CATALINA_HOME/shared/lib separately)">
		<jar destfile="${path.dist}/ghirl2-tomcat-${DSTAMP}.jar">
			<fileset dir="${path.build}"><patternset refid="no-tests"/></fileset>
			<zipfileset src="${path.tmp}/${lib.zip}"/>
		</jar>
	</target>		
	<target name="dist-lib-full-withtests" depends="compile,pack-all-libs" description="Jar up GHIRL for distribution (includes all dependencies and tests)">
		<jar destfile="${path.dist}/ghirl2-full-tests-${DSTAMP}.jar">
			<fileset dir="${path.build}"/>
			<zipfileset src="${path.tmp}/${lib.zip}"/>
			<zipfileset src="${path.devlib}/junit-4.7.jar"/>
		</jar>
	</target>
	
	<target name="dist-srcjar" depends="compile,pack-all-libs" description="Jar up GHIRL for distribution, including source, dependencies, and tests)">
		<copy todir="${path.build}">
			<fileset dir="${path.src}">
				<include name="**/*.java"/>
				<include name="**/*.cpp"/>
				<include name="**/*.h"/>
				<include name="**/*.c"/>
				<include name="**/*.cc"/>
			</fileset>
		</copy>
		<jar destfile="${path.dist}/ghirl2-srcjar-${DSTAMP}.jar">
			<fileset dir="${path.build}"/>
			<zipfileset src="${path.tmp}/${lib.zip}"/>
		</jar>
	</target>
	
	<target name="dist-custom" depends="compile" description="Like dist-lib-full but create an executable jar using a custom Main file (specify using -Dmainclass=package.path.to.class.name)">
		<jar destfile="${path.dist}/ghirl2-custom-${mainclass}.jar">
			<fileset dir="${path.build}"><patternset refid="no-tests"/></fileset>
			<zipfileset src="${path.tmp}/${lib.zip}"/>
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Main-Class" value="${mainclass}"/>
				<!-- The way you're *really* supposed to handle external libraries in a .jar file is as follows:
					OUTSIDE the <jar> element, do:
						<path id="dist.classpath">
							<fileset dir="${path.lib}" includes="**/*.jar, **/*.zip" />
						</path>			
						<manifestclasspath property="dist.manifest.classpath" jarfile="${path.dist}/ghirl-argh-${mainclass}.jar">
							<classpath refid="dist.classpath" />
						</manifestclasspath>
					then INSIDE the <manifest> element, do:
						<attribute name="Class-Path" value="${dist.manifest.classpath}"/>
					This, however, requires you to send your jar along with a lib directory so that the local paths inluded in Class-Path remain the same. There's no all-in-one-file way to do it other than unpacking and repacking as we're doing with zipfileset above.  :(
				-->
			</manifest>
		</jar>
	</target>
	
	<target name="jnilibs" depends="bdbstore,memstore"/>
	
	<target name="bbdb" depends="init" description="Compile the BB DB components (CPP)">
		<exec executable="${cxx.compiler}" failonerror="true">
			<arg line="${cxx.cflags}"/>
			<arg line="${cxx.includes}"/>
			<arg line="-o ${path.build}/ghirl/persistance/mydb.o"/>
			<arg line="-c ${path.src}/ghirl/persistance/bdbhash/BDB/mydb.cpp"/>
		</exec>
	</target>
	
	<target name="bdbstore" depends="bbdb" description="Compile the BDB store CPP components">
		<exec executable="${cxx.compiler}" failonerror="true">
			<arg line="${cxx.cflags}"/>
			<arg line="${cxx.includes}"/>
			<arg line="${cxx.lflags}"/>
			<arg line="${cxx.ldflags}"/>
			<arg value="${path.build}/ghirl/persistance/mydb.o"/>
			<arg line="-o ${path.build}/ghirl/persistance/libhexastore.${cxx.libext}"/>
			<arg value="${path.src}/ghirl/persistance/hexastore.cc"/>
		</exec>
	</target>
	
	<target name="memstore" depends="init" description="Compile the memstore CPP components">
		<exec executable="${cxx.compiler}" failonerror="true">
			<arg line="${cxx.cflags}"/>
			<arg line="${cxx.includes}"/>
			<arg line="-o ${path.build}/ghirl/persistance/libmemstore.${cxx.libext}"/>
			<arg value="${path.src}/ghirl/persistance/memstore.cc"/>
		</exec>
	</target>
	
	<target name="javadoc" depends="init" description="build javadoc API documentation">
		<delete dir="${path.javadoc}"/>
		<mkdir dir="${path.javadoc}"/>
		<javadoc sourcepath="${path.src}" destdir="${path.javadoc}" classpathref="compile.classpath"  packagenames="*">
		</javadoc>
	</target>
	
	<target name="verify" depends="prepare,compile" description="Run all verification tests">
		<junit printsummary="off" failureproperty="hasFailedTests" fork="on">
			<jvmarg value="-Djava.library.path=${tokyo.java.library.path}"/>
			<formatter type="brief"/>
			<classpath refid="compile.classpath"/>
			<batchtest>
				<fileset dir="${path.build}" id="verificationTests">
					<include name="ghirl/test/verify/Test*.class"/>
					<exclude name="**/*$*.class"/>
				</fileset>
			</batchtest>
		</junit>
		<fail if="hasFailedTests" message="See TEST-*.txt files for details on the failed tests noted above."/>
		<resourcecount property="verificationTestCount" refid="verificationTests"/>
		<echo>${verificationTestCount} verification tests passed.</echo>
	</target>
	
	<target name="test-class" depends="init" description="Run a single named (-DtestClass=fully.qualified.class.name) test">
		<fail message="Command-line switch testClass not defined.  Re-run with -DtestClass=your.fully.qualified.test.class">
			<condition><not><isset property="testClass"/></not></condition>
		</fail>
		<junit printsummary="withOutAndErr" failureproperty="hasFailedTests" fork="on">
			<jvmarg value="-Djava.library.path=${tokyo.java.library.path}"/>
			<formatter type="brief"/>
			<classpath refid="compile.classpath"/>
			<test name="${testClass}"/>
		</junit>
		<fail if="hasFailedTests" message="Test failed!"/>
		<echo>Test passed.</echo>
	</target>
</project>
